import sys
import cv2
import numpy as np
import os
import json
from PySide6.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
    QTextEdit, QMessageBox, QFileDialog, QGroupBox, QRadioButton, QButtonGroup,
    QComboBox, QTabWidget, QStackedWidget, QScrollArea, QSizePolicy
)
from PySide6.QtCore import QThread, Signal, Slot, Qt, QTimer
from PySide6.QtGui import QImage, QPixmap, QFont, QIcon
from ultralytics import YOLO
import supervision as sv
from supervision.tracker.byte_tracker.core import ByteTrack
from camera_utils import VideoThread, convert_cv_qt
from settings_dialog import SettingsDialog
from config import Config
from calibration_module import CalibrationDialog
from sync_module import SyncDialog
from distance_module import DistanceCalculatorDialog, DistanceCalculationThread


class Widget(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–ü–õ–ê")
        self.setMinimumSize(1000, 700)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = Config()
        
        # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.mode = "detection"  # default mode: detection, distance

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥)
        self.distance_module_enabled = False
        self.distance_module_baseline = 10.0

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
        self.setStyleSheet(
            """
            QWidget {
                background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #2C3E50, stop:1 #3498DB);
                font-family: Arial, sans-serif;
            }
            
            /* –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ */
            QLabel#title {
                color: white;
                font-size: 24px;
                font-weight: bold;
                padding: 20px;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 10px;
                margin: 10px;
            }
            
            QPushButton {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                              stop:0 #2ECC71, stop:1 #27AE60);
                color: white;
                border: none;
                padding: 12px 20px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 14px;
                margin: 5px;
                transition-duration: 0.4s;
                cursor: pointer;
                border-radius: 10px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                min-height: 30px;
                font-weight: bold;
            }
            
            QPushButton:hover {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                              stop:0 #27AE60, stop:1 #229954);
                transform: translateY(-2px);
                box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
            }
            
            QPushButton:pressed {
                background-color: #229954;
                transform: translateY(1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            
            QLabel#video_label {
                background-color: black;
                border: 3px solid #2ECC71;
                border-radius: 15px;
                padding: 10px;
                margin: 10px;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
                min-width: 320px;
                min-height: 240px;
            }
            
            QTextEdit {
                background-color: rgba(255, 255, 255, 0.85);
                border: 2px solid #2ECC71;
                border-radius: 10px;
                padding: 10px;
                margin: 5px;
                font-size: 12px;
                color: #2C3E50;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                min-height: 100px;
            }
            
            QScrollBar:vertical {
                border: none;
                background-color: rgba(0, 0, 0, 0.1);
                width: 10px;
                border-radius: 5px;
            }
            
            QScrollBar::handle:vertical {
                background-color: #2ECC71;
                border-radius: 5px;
                min-height: 30px;
            }
            
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
            
            QGroupBox {
                background-color: rgba(0, 0, 0, 0.15);
                border: 1px solid #2ECC71;
                border-radius: 10px;
                padding: 10px;
                margin: 5px;
                color: white;
                font-weight: bold;
                min-height: 50px;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 0 5px;
                color: white;
                font-weight: bold;
            }
            
            QRadioButton {
                color: white;
                font-size: 14px;
                spacing: 8px;
                margin: 5px;
                color: #FFFFFF;
                font-size: 14px;
                background: transparent;
                padding: 2px;
            }
            
            QRadioButton::indicator {
                width: 18px;
                height: 18px;
            }
            
            QComboBox {
                background-color: rgba(255, 255, 255, 0.8);
                border: 1px solid #2ECC71;
                border-radius: 5px;
                padding: 5px;
                min-width: 150px;
                color: #2C3E50;
            }
            
            QComboBox:hover {
                border: 1px solid #27AE60;
            }
            
            QComboBox::drop-down {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 20px;
                border-left-width: 1px;
                border-left-color: #2ECC71;
                border-left-style: solid;
            }
            
            QScrollArea {
                border: none;
                background-color: transparent;
            }

            QLabel {
                color: #FFFFFF;
                font-size: 14px;
                background: transparent;
                padding: 2px;
            }

            """
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QLabel("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–ü–õ–ê")
        self.title_label.setObjectName("title")
        self.title_label.setAlignment(Qt.AlignCenter)

        # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        self.connected = False

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.title_label)
        
        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        self.mode_group = QGroupBox("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        mode_layout = QHBoxLayout()
        
        self.mode_detection = QRadioButton("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ —Ç—Ä–µ–∫–∏–Ω–≥")
        self.mode_detection.setChecked(True)
        self.mode_detection.toggled.connect(lambda checked: self.change_mode("detection") if checked else None)
        
        self.mode_distance = QRadioButton("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, —Ç—Ä–µ–∫–∏–Ω–≥ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è")
        self.mode_distance.toggled.connect(lambda checked: self.change_mode("distance") if checked else None)
        
        mode_layout.addWidget(self.mode_detection)
        mode_layout.addWidget(self.mode_distance)
        mode_layout.addStretch()
        
        self.mode_group.setLayout(mode_layout)
        main_layout.addWidget(self.mode_group)
        
        # –°–æ–∑–¥–∞–µ–º stacked widget –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.stacked_widget = QStackedWidget()
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.detection_widget = QWidget()
        detection_layout = QHBoxLayout()
        
        # –í–∏–¥–µ–æ –ø–∞–Ω–µ–ª—å
        video_layout = QVBoxLayout()

        # –û–∫–Ω–æ —Å –≤–∏–¥–µ–æ
        self.video_label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞...")
        self.video_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.video_label.setMinimumSize(320, 240)
        self.video_label.setObjectName("video_label")
        self.video_label.setAlignment(Qt.AlignCenter)
        self.video_label.setScaledContents(False)

        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        self.log_text_edit = QTextEdit()
        self.log_text_edit.setReadOnly(True)
        self.log_text_edit.setMinimumHeight(100)
        self.log_text_edit.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)

        video_layout.addWidget(self.video_label, 7)
        video_layout.addWidget(self.log_text_edit, 3)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä)
        control_layout = QVBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        buttons_layout = QVBoxLayout()
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        main_buttons_layout = QHBoxLayout()
        
        self.model_button = QPushButton("üìÅ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ YOLO")
        self.model_button.clicked.connect(self.select_model)
        self.model_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        self.settings_button = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_button.clicked.connect(self.show_settings)
        self.settings_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        main_buttons_layout.addWidget(self.model_button)
        main_buttons_layout.addWidget(self.settings_button)
        
        buttons_layout.addLayout(main_buttons_layout)
        buttons_group.setLayout(buttons_layout)
        control_layout.addWidget(buttons_group)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
        cameras_group = QGroupBox("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∏–¥–µ–æ")
        cameras_layout = QVBoxLayout()
        
        self.cameras_scroll = QScrollArea()
        self.cameras_scroll.setWidgetResizable(True)
        self.cameras_scroll.setMinimumHeight(150)
        
        self.cameras_widget = QWidget()
        self.cameras_container = QVBoxLayout(self.cameras_widget)
        self.cameras_container.setSpacing(5)
        self.cameras_container.setContentsMargins(5, 5, 5, 5)
        self.cameras_container.addStretch()
        
        self.cameras_scroll.setWidget(self.cameras_widget)
        cameras_layout.addWidget(self.cameras_scroll)
        
        cameras_group.setLayout(cameras_layout)
        control_layout.addWidget(cameras_group)
        control_layout.addStretch()
        
        detection_layout.addLayout(video_layout, 7)
        detection_layout.addLayout(control_layout, 3)
        
        self.detection_widget.setLayout(detection_layout)
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –†–µ–∂–∏–º –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        self.distance_widget = QWidget()
        distance_layout = QHBoxLayout()
        
        # –í–∏–¥–µ–æ –ø–∞–Ω–µ–ª—å (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        distance_video_layout = QVBoxLayout()
        
        # –û–∫–Ω–æ —Å –≤–∏–¥–µ–æ
        self.distance_video_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è")
        self.distance_video_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.distance_video_label.setMinimumSize(320, 240)
        self.distance_video_label.setObjectName("video_label")
        self.distance_video_label.setAlignment(Qt.AlignCenter)
        self.distance_video_label.setScaledContents(False)
        
        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        self.distance_log_text_edit = QTextEdit()
        self.distance_log_text_edit.setReadOnly(True)
        self.distance_log_text_edit.setMinimumHeight(100)
        self.distance_log_text_edit.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        
        distance_video_layout.addWidget(self.distance_video_label, 7)
        distance_video_layout.addWidget(self.distance_log_text_edit, 3)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        distance_control_layout = QVBoxLayout()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        camera_selection_group = QGroupBox("–í—ã–±–æ—Ä –∫–∞–º–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        camera_selection_layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã
        self.cam1_layout = QHBoxLayout()
        self.cam1_layout.addWidget(QLabel("–ö–∞–º–µ—Ä–∞ 1:"))
        self.cam1_combo = QComboBox()
        self.cam1_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.cam1_layout.addWidget(self.cam1_combo)
        camera_selection_layout.addLayout(self.cam1_layout)
        
        # –í—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã
        self.cam2_layout = QHBoxLayout()
        self.cam2_layout.addWidget(QLabel("–ö–∞–º–µ—Ä–∞ 2:"))
        self.cam2_combo = QComboBox()
        self.cam2_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.cam2_layout.addWidget(self.cam2_combo)
        camera_selection_layout.addLayout(self.cam2_layout)
        
        # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.active_cam_layout = QHBoxLayout()
        self.active_cam_layout.addWidget(QLabel("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å:"))
        self.active_cam_combo = QComboBox()
        self.active_cam_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.active_cam_combo.addItem("–ö–∞–º–µ—Ä–∞ 1")
        self.active_cam_combo.addItem("–ö–∞–º–µ—Ä–∞ 2")
        self.active_cam_combo.currentIndexChanged.connect(self.on_camera_switch)
        self.active_cam_layout.addWidget(self.active_cam_combo)
        camera_selection_layout.addLayout(self.active_cam_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        measurement_buttons_layout = QHBoxLayout()
        self.start_distance_button = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ")
        self.start_distance_button.clicked.connect(self.start_distance_measurement)
        self.start_distance_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        self.stop_distance_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_distance_button.clicked.connect(self.stop_distance_measurement)
        self.stop_distance_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.stop_distance_button.setEnabled(False)
        
        measurement_buttons_layout.addWidget(self.start_distance_button)
        measurement_buttons_layout.addWidget(self.stop_distance_button)
        
        camera_selection_layout.addLayout(measurement_buttons_layout)
        camera_selection_group.setLayout(camera_selection_layout)
        distance_control_layout.addWidget(camera_selection_group)
        
        # –ì—Ä—É–ø–ø–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å")
        status_layout = QVBoxLayout()
        
        self.calibration_status_label = QLabel("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: ‚ùå")
        self.sync_status_label = QLabel("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ‚ùå")
        
        status_layout.addWidget(self.calibration_status_label)
        status_layout.addWidget(self.sync_status_label)
        status_group.setLayout(status_layout)
        
        distance_control_layout.addWidget(status_group)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        tools_group = QGroupBox("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        tools_layout = QVBoxLayout()
        
        self.distance_calibration_button = QPushButton("üîç –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä")
        self.distance_calibration_button.clicked.connect(self.open_calibration_dialog)
        self.distance_calibration_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        self.distance_sync_button = QPushButton("‚è±Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä")
        self.distance_sync_button.clicked.connect(self.open_sync_dialog)
        self.distance_sync_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        self.distance_model_button = QPushButton("üìÅ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ YOLO")
        self.distance_model_button.clicked.connect(self.select_model)
        self.distance_model_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
        self.distance_settings_button = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.distance_settings_button.clicked.connect(self.show_settings)
        self.distance_settings_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        tools_layout.addWidget(self.distance_calibration_button)
        tools_layout.addWidget(self.distance_sync_button)
        tools_layout.addWidget(self.distance_model_button)
        tools_layout.addWidget(self.distance_settings_button)
        
        tools_group.setLayout(tools_layout)
        distance_control_layout.addWidget(tools_group)
        
        distance_control_layout.addStretch()
        
        distance_layout.addLayout(distance_video_layout, 7)
        distance_layout.addLayout(distance_control_layout, 3)
        
        self.distance_widget.setLayout(distance_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å—Ç–µ–∫–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
        self.stacked_widget.addWidget(self.detection_widget)
        self.stacked_widget.addWidget(self.distance_widget)
        
        main_layout.addWidget(self.stacked_widget)
        
        self.setLayout(main_layout)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–º
        self.thread = None
        self.selected_camera_url = None
        self.model_path = self.config.get_last_model()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞
        self.load_cameras()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.update_calibration_sync_status()

    def update_calibration_sync_status(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        calibration_status = self.config.get_calibration_status()
        if calibration_status.get('calibrated', False):
            self.calibration_status_label.setText("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: ‚úÖ")
        else:
            self.calibration_status_label.setText("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: ‚ùå")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_status = self.config.get_sync_status()
        if sync_status.get('synced', False):
            self.sync_status_label.setText("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ‚úÖ")
        else:
            self.sync_status_label.setText("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ‚ùå")

    def change_mode(self, mode):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        if mode == self.mode:
            return
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ—Ç–æ–∫–∏
        if self.thread and self.thread.isRunning():
            self.thread.stop()
            self.thread = None
            
        self.mode = mode
        
        if mode == "detection":
            self.stacked_widget.setCurrentIndex(0)
            self.log_message("–†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        elif mode == "distance":
            self.stacked_widget.setCurrentIndex(1)
            self.distance_log_text_edit.append("–†–µ–∂–∏–º –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            calibration_status = self.config.get_calibration_status()
            sync_status = self.config.get_sync_status()
            
            if not calibration_status.get('calibrated', False):
                self.distance_log_text_edit.append("‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω—ã! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É.")
                
            if not sync_status.get('synced', False):
                self.distance_log_text_edit.append("‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")

    def open_calibration_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–∞–º–µ—Ä."""
        dialog = CalibrationDialog(self)
        if dialog.exec():
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            self.update_calibration_sync_status()
            self.log_message("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "green")

    def open_sync_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä."""
        dialog = SyncDialog(self)
        if dialog.exec():
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.update_calibration_sync_status()
            self.log_message("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "green")

    def open_distance_calculator(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."""
        dialog = DistanceCalculatorDialog(self)
        dialog.exec()


    def start_distance_measurement(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞–º–µ—Ä—ã –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        calibration_status = self.config.get_calibration_status()
        sync_status = self.config.get_sync_status()
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞–º–µ—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤
        camera1_url = self.cam1_combo.currentData()
        camera2_url = self.cam2_combo.currentData()
        
        if not camera1_url or not camera2_url:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
            return
            
        if camera1_url == camera2_url:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
        if not self.model_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å YOLO. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ YOLO'.")
            return
        
        warnings = []
        if not calibration_status.get('calibrated', False):
            warnings.append("–ö–∞–º–µ—Ä—ã –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω—ã")
            
        if not sync_status.get('synced', False):
            warnings.append("–ö–∞–º–µ—Ä—ã –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        if warnings:
            warning_text = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join([f"- {w}" for w in warnings])
            warning_text += "\n\n–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
            
            result = QMessageBox.warning(
                self, 
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                warning_text,
                QMessageBox.Yes | QMessageBox.No
            )
            
            if result == QMessageBox.No:
                return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if self.thread and self.thread.isRunning():
            self.thread.stop()
            self.thread = None
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ
        if hasattr(self, 'distance_thread') and self.distance_thread and self.distance_thread.isRunning():
            self.distance_thread.stop()
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        calibration_data = {}
        sync_data = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        if os.path.exists("calibration_data.json"):
            try:
                with open("calibration_data.json", "r") as f:
                    calibration_data = json.load(f)
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}", "red")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if os.path.exists("sync_data.json"):
            try:
                with open("sync_data.json", "r") as f:
                    sync_data = json.load(f)
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", "red")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–∑–∏—Å–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        baseline = 10.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        distance_settings = self.config.get_distance_measure_settings()
        if 'baseline' in distance_settings:
            baseline = distance_settings['baseline']
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        self.distance_thread = DistanceCalculationThread(
            camera1_url, camera2_url, self.model_path, baseline, 
            calibration_data, sync_data
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.distance_thread.frame_signal.connect(self.update_distance_frame)
        self.distance_thread.error_signal.connect(self.on_distance_error)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        self.distance_thread.start()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.distance_log_text_edit.clear()
        self.distance_log_text_edit.append(f"–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ")
        self.distance_log_text_edit.append(f"–ö–∞–º–µ—Ä–∞ 1: {self.cam1_combo.currentText()} ({camera1_url})")
        self.distance_log_text_edit.append(f"–ö–∞–º–µ—Ä–∞ 2: {self.cam2_combo.currentText()} ({camera2_url})")
        self.distance_log_text_edit.append(f"–ú–æ–¥–µ–ª—å: {self.model_path}")
        self.distance_log_text_edit.append(f"–ë–∞–∑–∏—Å: {baseline} —Å–º")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –∏ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.start_distance_button.setEnabled(False)
        self.stop_distance_button.setEnabled(True)
    
    def update_distance_frame(self, original_frame, processed_frame, info):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–¥—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
        if original_frame is None or processed_frame is None:
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∫–∞–¥—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–∞–º–µ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        display_index = self.active_cam_combo.currentIndex()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –≤ 100 –∫–∞–¥—Ä–æ–≤
        if not hasattr(self, 'debug_counter'):
            self.debug_counter = 0
        
        self.debug_counter += 1
        if self.debug_counter % 100 == 0:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.distance_log_text_edit.clear()
            self.distance_log_text_edit.append(f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã: {display_index}")
            self.distance_log_text_edit.append(f"–ö–∞–º–µ—Ä–∞ 1: {self.cam1_combo.currentText()}")
            self.distance_log_text_edit.append(f"–ö–∞–º–µ—Ä–∞ 2: {self.cam2_combo.currentText()}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–¥—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã
        # –ò–Ω–¥–µ–∫—Å 0 - –ö–∞–º–µ—Ä–∞ 1 (original_frame), –ò–Ω–¥–µ–∫—Å 1 - –ö–∞–º–µ—Ä–∞ 2 (processed_frame)
        frame_to_display = original_frame if display_index == 0 else processed_frame
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ—Å–∞–π–∑–∞
        self.last_distance_frame = frame_to_display.copy()
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –∫–∞–¥—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        self.cam1_frame = original_frame.copy()
        self.cam2_frame = processed_frame.copy()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–¥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Qt
        qt_img = convert_cv_qt(frame_to_display)
        
        # –°–æ–∑–¥–∞–µ–º QPixmap –∏–∑ QImage
        pixmap = QPixmap.fromImage(qt_img)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        scaled_pixmap = pixmap.scaled(
            self.distance_video_label.width(), 
            self.distance_video_label.height(),
            Qt.KeepAspectRatio, 
            Qt.SmoothTransformation
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ –º–µ—Ç–∫–µ
        self.distance_video_label.setPixmap(scaled_pixmap)
        self.distance_video_label.setAlignment(Qt.AlignCenter)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –≤ –ª–æ–≥
        detections = info.get('detections', {})
        if detections and self.debug_counter % 30 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
            self.distance_log_text_edit.append("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –≤ –ª–æ–≥–µ
            for i, (obj_id, obj_data) in enumerate(list(detections.items())[:5]):
                cls_name = obj_data['class']
                distance = obj_data['distance']
                confidence = obj_data['confidence']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                if distance < 2:  # –±–ª–∏–∂–µ 2 –º–µ—Ç—Ä–æ–≤
                    color = "red"
                elif distance < 5:  # 2-5 –º–µ—Ç—Ä–æ–≤
                    color = "orange"
                else:
                    color = "green"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                self.distance_log_text_edit.append(
                    f'<span style="color: {color};"><b>{cls_name}</b> (ID: {obj_id.split("_")[1]}): '
                    f'{distance:.2f} –º (—É–≤–µ—Ä.: {confidence:.2f})</span>'
                )
                
    def on_distance_error(self, error_msg):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –ø–æ—Ç–æ–∫–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."""
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
        self.stop_distance_measurement()

    def stop_distance_measurement(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."""
        if hasattr(self, 'distance_thread') and self.distance_thread and self.distance_thread.isRunning():
            self.distance_thread.stop()
            self.distance_thread = None
            
        # –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.distance_video_label.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è")
        self.distance_video_label.setPixmap(QPixmap())
        
        self.distance_log_text_edit.append("–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.start_distance_button.setEnabled(True)
        self.stop_distance_button.setEnabled(False)

    def show_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        dialog = SettingsDialog(self, self.model_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        detection_settings = self.config.get_detection_settings()
        settings = {
            'conf': detection_settings['confidence_threshold'],
            'iou': detection_settings['iou_threshold'],
            'device': 'cpu',  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'half': False,    # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'fps': 30        # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è FPS
        }
        dialog.set_settings(settings)
        
        if dialog.exec():
            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            new_settings = dialog.get_settings()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
            self.config.set_detection_settings(
                confidence_threshold=new_settings.get('conf'),
                iou_threshold=new_settings.get('iou')
            )
            
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if self.thread and self.thread.isRunning():
                self.thread.update_settings(new_settings)
                self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "green", both_logs=True)
            else:
                self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞", "blue", both_logs=True)

    def log_message(self, message, color="black", both_logs=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            color: –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            both_logs: –ï—Å–ª–∏ True, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–æ–∏—Ö –ª–æ–≥–∞—Ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        formatted_message = f'<span style="color: {color};">{message}</span>'
        
        if both_logs or self.mode == "detection":
            self.log_text_edit.append(formatted_message)
            
        if both_logs or self.mode == "distance":
            self.distance_log_text_edit.append(formatted_message)

    def load_cameras(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞ cameras.txt –∏ —Å–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∏—Ö."""
        try:
            with open("cameras.txt", "r") as f:
                camera_lines = [line.strip() for line in f if line.strip()]
            if not camera_lines:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª cameras.txt –ø—É—Å—Ç.")
                return
                
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            while self.cameras_container.count():
                item = self.cameras_container.takeAt(0)
                widget = item.widget()
                if widget:
                    widget.deleteLater()
                    
            self.cam1_combo.clear()
            self.cam2_combo.clear()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –∏–∑ cameras.txt
            cameras = []
            camera_names = []
            
            for line in camera_lines:
                parts = line.strip().split(' ', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–º—è –∏ URL
                if len(parts) == 2:
                    camera_name = parts[0]
                    camera_url = parts[1]
                    cameras.append(camera_url)
                    camera_names.append(camera_name)
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ URL
                    cameras.append(line)
                    camera_names.append(f"–ö–∞–º–µ—Ä–∞ {len(cameras)}")
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
            self.log_message("–ö–∞–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", "black")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            button_colors = [
                "qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #3498db, stop:1 #2980b9)",
                "qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #2ecc71, stop:1 #27ae60)",
                "qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #e74c3c, stop:1 #c0392b)",
                "qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #9b59b6, stop:1 #8e44ad)",
                "qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #f1c40f, stop:1 #f39c12)"
            ]
            
            for i, (camera_url, camera_name) in enumerate(zip(cameras, camera_names)):
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–º–µ—Ä—ã –∏ –∏–º–µ–Ω–µ–º –∏–∑ —Ñ–∞–π–ª–∞
                btn = QPushButton(f"üìπ {camera_name}")
                btn.clicked.connect(lambda ch, url=camera_url: self.select_camera(url))
                btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
                btn.setMinimumHeight(40)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ —Ü–∏–∫–ª—É
                color_index = i % len(button_colors)
                btn.setStyleSheet(f"""
                    QPushButton {{
                        background: {button_colors[color_index]};
                        font-weight: bold;
                    }}
                    QPushButton:hover {{
                        background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                                            stop:0 #3aaef0, stop:1 #2980b9);
                    }}
                """)
                
                self.cameras_container.addWidget(btn)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                self.cam1_combo.addItem(f"{camera_name}", camera_url)
                self.cam2_combo.addItem(f"{camera_name}", camera_url)
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
            self.cameras_container.addStretch()
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–∞–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            if len(cameras) > 1:
                self.cam2_combo.setCurrentIndex(1)
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if hasattr(self.config, 'get_distance_measure_settings'):
                distance_settings = self.config.get_distance_measure_settings()
                if 'cameras' in distance_settings and len(distance_settings['cameras']) >= 2:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
                    cam1 = distance_settings['cameras'][0]
                    cam2 = distance_settings['cameras'][1]
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã –ø–æ URL –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤
                    for i in range(self.cam1_combo.count()):
                        if self.cam1_combo.itemData(i) == cam1:
                            self.cam1_combo.setCurrentIndex(i)
                            break
                            
                    for i in range(self.cam2_combo.count()):
                        if self.cam2_combo.itemData(i) == cam2:
                            self.cam2_combo.setCurrentIndex(i)
                            break
                    
        except FileNotFoundError:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                "–§–∞–π–ª cameras.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–º–µ—Ä."
            )
            sys.exit(1)

    @Slot()
    def select_model(self):
        """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ YOLO (.pt —Ñ–∞–π–ª)."""
        file_name, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å YOLO",
            "",
            "YOLO Model (*.pt)"
        )
        if file_name:
            self.model_path = file_name
            self.config.set_last_model(file_name)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {file_name}", "blue", both_logs=True)
            
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
            if self.thread and self.thread.isRunning():
                if self.thread.set_model(self.model_path):
                    self.log_message("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "green", both_logs=True)
                else:
                    self.log_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏", "red", both_logs=True)

    @Slot()
    def select_camera(self, camera_url):
        """–í—ã–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."""
        self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞–º–µ—Ä–∞: {camera_url}", "black")
        self.selected_camera_url = camera_url
        self.connected = False
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ
        if self.thread is not None and self.thread.isRunning():
            self.thread.stop()
            self.thread = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã
        cap = cv2.VideoCapture(camera_url)
        if not cap.isOpened():
            self.log_message(f"–ö–∞–º–µ—Ä–∞ {camera_url} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "red")
            cap.release()
            return
        cap.release()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        detection_settings = self.config.get_detection_settings()
        
        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.thread = VideoThread(
            camera_url,
            conf=detection_settings['confidence_threshold'],
            iou=detection_settings['iou_threshold'],
            device='cpu',  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            half=False,    # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è half-precision
            fps=30         # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è FPS
        )
        self.thread.change_pixmap_signal.connect(self.update_video_frame)
        self.thread.detection_signal.connect(self.log_message)
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
        if self.model_path:
            if self.thread.set_model(self.model_path):
                self.log_message("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "green")
            else:
                self.log_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏", "red")
        
        self.thread.start()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞–º–µ—Ä—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config.set_last_camera(camera_url)

    @Slot(object)
    def update_video_frame(self, frame):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–¥—Ä –≤ –æ–∫–Ω–µ –≤–∏–¥–µ–æ."""
        if frame is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ—Å–∞–π–∑–∞
            self.last_frame = frame
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QImage
            qt_img = convert_cv_qt(frame)
            
            # –°–æ–∑–¥–∞–µ–º QPixmap –∏–∑ QImage
            pixmap = QPixmap.fromImage(qt_img)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π label –æ–±–Ω–æ–≤–ª—è—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            target_label = self.video_label if self.mode == "detection" else self.distance_video_label
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            scaled_pixmap = pixmap.scaled(
                target_label.width(), 
                target_label.height(),
                Qt.KeepAspectRatio, 
                Qt.SmoothTransformation
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            target_label.setPixmap(scaled_pixmap)
            target_label.setAlignment(Qt.AlignCenter)

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞."""
        super().resizeEvent(event)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–¥—Ä
        if hasattr(self, 'last_frame') and self.last_frame is not None:
            # –í —Ä–µ–∂–∏–º–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º update_video_frame
            if self.mode == "detection":
                self.update_video_frame(self.last_frame)
            # –í —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            elif self.mode == "distance" and self.distance_video_label.pixmap():
                qt_img = convert_cv_qt(self.last_frame)
                pixmap = QPixmap.fromImage(qt_img)
                scaled_pixmap = pixmap.scaled(
                    self.distance_video_label.width(), 
                    self.distance_video_label.height(),
                    Qt.KeepAspectRatio, 
                    Qt.SmoothTransformation
                )
                self.distance_video_label.setPixmap(scaled_pixmap)
                self.distance_video_label.setAlignment(Qt.AlignCenter)

    def closeEvent(self, event):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if self.thread is not None and self.thread.isRunning():
            self.thread.stop()
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if hasattr(self, 'distance_thread') and self.distance_thread and self.distance_thread.isRunning():
            self.distance_thread.stop()
            
        event.accept()

    def on_camera_switch(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ."""
        self.distance_log_text_edit.append(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É: {index + 1}")
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã, —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if hasattr(self, 'cam1_frame') and hasattr(self, 'cam2_frame'):
            if index == 0 and self.cam1_frame is not None:
                self.update_camera_display(self.cam1_frame)
                self.distance_log_text_edit.append("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–∞–º–µ—Ä—É 1")
            elif index == 1 and self.cam2_frame is not None:
                self.update_camera_display(self.cam2_frame)
                self.distance_log_text_edit.append("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–∞–º–µ—Ä—É 2")
    
    def update_camera_display(self, frame):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã."""
        if frame is None:
            return
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–¥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Qt
        qt_img = convert_cv_qt(frame)
        
        # –°–æ–∑–¥–∞–µ–º QPixmap –∏–∑ QImage
        pixmap = QPixmap.fromImage(qt_img)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        scaled_pixmap = pixmap.scaled(
            self.distance_video_label.width(), 
            self.distance_video_label.height(),
            Qt.KeepAspectRatio, 
            Qt.SmoothTransformation
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ –º–µ—Ç–∫–µ
        self.distance_video_label.setPixmap(scaled_pixmap)
        self.distance_video_label.setAlignment(Qt.AlignCenter)
        
    def refresh_video_stream(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –≤–∏–¥–µ–æ."""
        if hasattr(self, 'distance_thread') and self.distance_thread and self.distance_thread.isRunning():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã
            current_camera_index = self.active_cam_combo.currentIndex()
            self.distance_log_text_edit.append(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã {current_camera_index + 1}")
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã, —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if current_camera_index == 0 and hasattr(self, 'cam1_frame') and self.cam1_frame is not None:
                self.update_camera_display(self.cam1_frame)
                self.distance_log_text_edit.append("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–∞–º–µ—Ä—É 1")
            elif current_camera_index == 1 and hasattr(self, 'cam2_frame') and self.cam2_frame is not None:
                self.update_camera_display(self.cam2_frame)
                self.distance_log_text_edit.append("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–∞–º–µ—Ä—É 2")
            else:
                self.distance_log_text_edit.append("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞...")
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
                self.stop_distance_measurement()
                self.start_distance_measurement()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = Widget()
    widget.show()
    sys.exit(app.exec())

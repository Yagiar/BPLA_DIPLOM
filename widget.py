import sys
import cv2
import numpy as np
from PySide6.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
    QTextEdit, QMessageBox, QFileDialog
)
from PySide6.QtCore import QThread, Signal, Slot, Qt
from PySide6.QtGui import QImage, QPixmap
from ultralytics import YOLO
import supervision as sv
from supervision.tracker.byte_tracker.core import ByteTrack
from camera_utils import VideoThread, convert_cv_qt
from settings_dialog import SettingsDialog
from config import Config
from distance_measure_dialog import DistanceMeasureDialog


class Widget(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–ü–õ–ê")
        self.setMinimumSize(1730, 970)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = Config()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥)
        self.distance_module_enabled = False
        self.distance_module_baseline = 10.0

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
        self.setStyleSheet(
            """
            QWidget {
                background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #2C3E50, stop:1 #3498DB);
                font-family: Arial, sans-serif;
            }
            
            /* –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ */
            QLabel#title {
                color: white;
                font-size: 24px;
                font-weight: bold;
                padding: 20px;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 10px;
                margin: 10px;
            }
            
            QPushButton {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                              stop:0 #2ECC71, stop:1 #27AE60);
                color: white;
                border: none;
                padding: 15px 25px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                margin: 8px 4px;
                transition-duration: 0.4s;
                cursor: pointer;
                border-radius: 15px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            
            QPushButton:hover {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                              stop:0 #27AE60, stop:1 #229954);
                transform: translateY(-2px);
                box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
            }
            
            QPushButton:pressed {
                background-color: #229954;
                transform: translateY(1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            
            QLabel#video_label {
                background-color: black;
                border: 3px solid #2ECC71;
                border-radius: 15px;
                padding: 10px;
                margin: 10px;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            }
            
            QTextEdit {
                background-color: rgba(255, 255, 255, 0.9);
                border: 2px solid #2ECC71;
                border-radius: 15px;
                padding: 15px;
                margin: 10px;
                font-size: 14px;
                color: #2C3E50;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }
            
            QScrollBar:vertical {
                border: none;
                background-color: rgba(0, 0, 0, 0.1);
                width: 10px;
                border-radius: 5px;
            }
            
            QScrollBar::handle:vertical {
                background-color: #2ECC71;
                border-radius: 5px;
            }
            
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
            """
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QLabel("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–ü–õ–ê")
        self.title_label.setObjectName("title")
        self.title_label.setAlignment(Qt.AlignCenter)

        # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        self.connected = False

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.model_button = QPushButton("üìÅ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ YOLO")
        self.model_button.clicked.connect(self.select_model)
        
        self.settings_button = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_button.clicked.connect(self.show_settings)
        
        self.distance_button = QPushButton("üìè –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è")
        self.distance_button.clicked.connect(self.open_distance_measure_dialog)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
        self.cameras_container = QVBoxLayout()
        self.cameras_container.setSpacing(10)
        self.cameras_container.setContentsMargins(10, 10, 10, 10)

        # –°–æ–∑–¥–∞–¥–∏–º –≤–∏–¥–∂–µ—Ç-–æ–±—ë—Ä—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞–º–µ—Ä
        self.cameras_widget = QWidget()
        self.cameras_widget.setLayout(self.cameras_container)

        # –û–∫–Ω–æ —Å –≤–∏–¥–µ–æ
        self.video_label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞...")
        self.video_label.setFixedSize(800, 600)
        self.video_label.setObjectName("video_label")
        self.video_label.setAlignment(Qt.AlignCenter)

        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        self.log_text_edit = QTextEdit()
        self.log_text_edit.setReadOnly(True)
        self.log_text_edit.setMinimumHeight(200)

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.title_label)
        
        content_layout = QHBoxLayout()
        
        video_layout = QVBoxLayout()
        video_layout.addWidget(self.video_label)
        video_layout.addWidget(self.log_text_edit)
        
        control_layout = QVBoxLayout()
        buttons_layout = QHBoxLayout()
        buttons_layout.addWidget(self.model_button)
        buttons_layout.addWidget(self.settings_button)
        buttons_layout.addWidget(self.distance_button)
        control_layout.addLayout(buttons_layout)
        control_layout.addWidget(self.cameras_widget)
        control_layout.addStretch()
        
        content_layout.addLayout(video_layout, stretch=7)
        content_layout.addLayout(control_layout, stretch=3)
        
        main_layout.addLayout(content_layout)
        self.setLayout(main_layout)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–º
        self.thread = None
        self.selected_camera_url = None
        self.model_path = self.config.get_model_settings()['path']

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞
        self.load_cameras()

    def open_distance_measure_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."""
        dialog = DistanceMeasureDialog(self)
        if dialog.exec():
            enabled, selected_cams, baseline = dialog.get_values()
            self.distance_module_enabled = enabled
            self.distance_module_baseline = baseline
            if not enabled:
                self.log_message("–ú–æ–¥—É–ª—å –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω.", "blue")
            else:
                self.log_message(f"–í—ã–±—Ä–∞–Ω—ã –∫–∞–º–µ—Ä—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: {selected_cams}, –±–∞–∑–∏—Å: {baseline}", "blue")

    def show_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        dialog = SettingsDialog(self, self.model_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        model_settings = self.config.get_model_settings()
        tracker_settings = self.config.get_tracker_settings()
        settings = {
            'conf': model_settings['conf'],
            'iou': model_settings['iou'],
            'device': model_settings['device'],
            'half': model_settings['half'],
            'fps': tracker_settings['fps']
        }
        dialog.set_settings(settings)
        
        if dialog.exec():
            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            new_settings = dialog.get_settings()
            self.config.update_settings(new_settings)
            
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if self.thread and self.thread.isRunning():
                self.thread.update_settings(new_settings)
                self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "green")

    def log_message(self, message, color="black"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        self.log_text_edit.append(f'<span style="color: {color};">{message}</span>')

    def load_cameras(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞ cameras.txt –∏ —Å–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∏—Ö."""
        try:
            with open("cameras.txt", "r") as f:
                cameras = [line.strip() for line in f if line.strip()]
            if not cameras:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª cameras.txt –ø—É—Å—Ç.")
                return
            self.log_message("–ö–∞–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", "black")
            for camera_url in cameras:
                btn = QPushButton(camera_url)
                btn.clicked.connect(lambda ch, url=camera_url: self.select_camera(url))
                self.cameras_container.addWidget(btn)
        except FileNotFoundError:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                "–§–∞–π–ª cameras.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–º–µ—Ä."
            )
            sys.exit(1)

    @Slot()
    def select_model(self):
        """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ YOLO (.pt —Ñ–∞–π–ª)."""
        file_name, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å YOLO",
            "",
            "YOLO Model (*.pt)"
        )
        if file_name:
            self.model_path = file_name
            self.config.update_model_path(file_name)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {file_name}", "blue")
            
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
            if self.thread and self.thread.isRunning():
                if self.thread.set_model(self.model_path):
                    self.log_message("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "green")
                else:
                    self.log_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏", "red")

    @Slot()
    def select_camera(self, camera_url):
        """–í—ã–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."""
        self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞–º–µ—Ä–∞: {camera_url}", "black")
        self.selected_camera_url = camera_url
        self.connected = False
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ
        if self.thread is not None and self.thread.isRunning():
            self.thread.stop()
            self.thread = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã
        cap = cv2.VideoCapture(camera_url)
        if not cap.isOpened():
            self.log_message(f"–ö–∞–º–µ—Ä–∞ {camera_url} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "red")
            cap.release()
            return
        cap.release()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        model_settings = self.config.get_model_settings()
        tracker_settings = self.config.get_tracker_settings()
        
        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.thread = VideoThread(
            camera_url,
            conf=model_settings['conf'],
            iou=model_settings['iou'],
            device=model_settings['device'],
            half=model_settings['half'],
            fps=tracker_settings['fps']
        )
        self.thread.change_pixmap_signal.connect(self.update_video_frame)
        self.thread.detection_signal.connect(self.log_message)
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
        if self.model_path:
            if self.thread.set_model(self.model_path):
                self.log_message("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "green")
            else:
                self.log_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏", "red")
        
        self.thread.start()

    @Slot(object)
    def update_video_frame(self, frame):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–¥—Ä –≤ –æ–∫–Ω–µ –≤–∏–¥–µ–æ."""
        if frame is not None:
            self.video_label.setPixmap(QPixmap.fromImage(convert_cv_qt(frame)))

    def closeEvent(self, event):
        if self.thread is not None and self.thread.isRunning():
            self.thread.stop()
        event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = Widget()
    widget.show()
    sys.exit(app.exec())
